<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<bean id = "write" class = "spring.WriteImpl">
		<constructor-arg>
			<ref bean = "articleDao" />
		</constructor-arg>
	</bean>
	
	<bean id = "articleDao" class = "spring.MariadbArticleDao" />
	<bean id = "logging" class = "spring.LoggingAspect" />
	<!-- aop 정리
	aop? : 
	pointcut : 핵심메소드를 설정
	public * spring.*Impl.*(..) : public 접근 제어자를 가지며 반환타입이 모든 형식인 대상 중 spring 패키지 클래스 중에서 Impl 로 끝나며 모든 파라매터를 받는 대상
	aspect : aop에 사용되는 Aspect 클래스를 의미
	advice : aop가 실행될 시점을 설정
		* around : 핵심메소드 실행 전과 후에 aop를 실행
		* before : 핵심메소드 실행 전에 aop를 실행
		* after : 핵심메소드 실행 후 aop를 실행
		* afterReturning : 핵심메소드 정상 실행 후 aop 실행
		* afterThrowing : 핵심메소드 오류 종료 후 aop 실행
	 -->
	<aop:config>
		<aop:pointcut expression = "execution(public * spring.*Impl.*(..))"
			id = "servicepointcut" />
		<aop:aspect id = "loggingAspect" ref = "logging">
			<aop:around method = "logging" pointcut-ref="servicepointcut"/>
		</aop:aspect>
	</aop:config>
</beans>